buildscript {
    dependencies {
        classpath 'org.graalvm.buildtools:native-gradle-plugin:0.9.20'
    }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.20'
}

if (project.hasProperty('native')) {
	apply plugin: 'org.graalvm.buildtools.native'
}

group = 'dev.ubaid'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.1")
	set('testcontainersVersion', "1.17.6")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootBuildImage {
	if (project.hasProperty("native")) {
		environment = [
		        'SPRING_PROFILES_ACTIVE': 'prod',
				'BP_NATIVE_IMAGE': 'true'
		]
	} else {
		environment = [
		        'SPRING_PROFILES_ACTIVE': 'prod'
		]
	}
	docker {
		if (project.hasProperty("ci")) {
			publishRegistry {
				username=project.findProperty("registryUsername")
				password=project.findProperty("registryToken")
				url=project.findProperty("registryUrl")
			}
		}
	}
}