management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include:
          - health
          - prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        include:
          readiness: readinessState,redis
  metrics:
    tags:
      application: ${spring.application.name}
        
server:
  netty:
    idle-timeout: 15s
    connection-timeout: 2s
  port: 50090
  shutdown: graceful
  reactive:
    session:
      timeout: 10m

spring:
  application:
    name: edge-service
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  devtools:
    livereload:
      port: 51090
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    gateway:
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:50101}/api/books
          predicates:
            - Path=/api/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:50201}/api/orders
          predicates:
            - Path=/api/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreak
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
      httpclient:
        wiretap: true
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: SaveSession
        - name: TokenRelay
    config:
      enabled: false
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 50988
      timeout: 1s
  security:
    oauth2:
      client:
        registration:
          polarBookShop:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid,roles
        provider:
          polarBookShop:
            issuerUri: ${AUTH_SERVER_URL:http://localhost:50907}/realms/PolarBookshop
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVER_URL:http://localhost:50907}/realms/PolarBookshop
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  level:
    dev.ubaid: TRACE
    tech.jhipster: DEBUG
    reactor.netty: INFO
    root: INFO
    circuitbreaker: DEBUG
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  pattern:
    level: "%5p [${spring.application.name}, %X{trace_id}, %X{span_id}]"

polar:
  home-message: Hello Edge Service from default profile
